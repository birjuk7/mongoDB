//MongoDB in less than 15 minutes


// Step-1
// Why Mongodb is Different?
// Simple Overview about MongoDB


// Basics of JSON
// Sample JSON structure
// https://en.wikipedia.org/wiki/JSON#JSON_sample
// Quick Reference @
// http://www.jsoneditoronline.org/


// Step-2
// Install MongoDB and MongoBooster.
// Connect MongoBooster to MongoDB


// Step-3
//Create Database
//Create collection
db.createCollection("userprofile")


// Step-4
// 2 Key things to Note.


// 1. Documents with Different Structures in same collection
// 2. Every document will have a default field _id   [Autogenerated, unique in a collection , indexed, can be replaced]


/*

userprofile   Structure 1
{
Id:
name:
age:
income:
sex:
nationality:
Language:
additional_info:
}


	userprofile Structure 2
{
userid:
logged_in:
last_login:
location:
type:
}
*/

//Sample Demo Data1 for CRUD
db.userprofile.insert({
userid:'usr_001',
logged_in:true,
last_login:'6-12-2017 10:30',
location:'US',
type:'admin'
}
)

//Sample Demo Data2 for CRUD
db.userprofile.insert(
{
id:1,
name:'Mahendra Singh Dhoni',
age:35,
income:5990800,
sex:'M',
nationality:'India',
Language:'hindi',
additional_info:'Referred by chris Moris'
})
	



// Step-5a
// Basic CRUD operation in MongoDB


// Insertion  and Multiple Insert in Single Query

//Sample Demo Data for CRUD
db.userprofile.insert({
userid:'usr_001',
logged_in:true,
last_login:'6-12-2017 10:30',
location:'US',
type:'admin'
}
)

//Sample Demo Data for CRUD
db.userprofile.insert(
{
userid:'usr_002',
logged_in:false,
last_login:'7-04-2017 11:20',
location:'US',
type:'devops',
}
)

// Sample Data 2

//Sample Demo Data2 for CRUD
db.userprofile.insert(
{
id:1,
name:'Mahendra Singh Dhoni',
age:35,
income:5990800,
sex:'M',
nationality:'India',
Language:'hindi',
additional_info:'Referred by chris Moris'
})

//Sample Demo Data2 for CRUD
db.userprofile.insert(
{
id:2,
name:'Joseph Edward Root',
age:26,
income:390000,
sex:'M',
nationality:'Britain',
Language:'english',
additional_info:'Playing for Yorkshire'
})





//Sample Demo Data2 for CRUD
db.userprofile.insert(
{
id:3,
name:'Kamran Akmal',
age:35,
income:290000,
sex:'M',
nationality:'Pakistan',
Language:'urdu',
additional_info:'Lahore, Punjab, Pakistan Wicketkeeper-Batsman'
})


//Sample Demo Data2 for CRUD
db.userprofile.insert(
{
id:4,
name:'David Andrew Warner',
age:30,
income:7890000,
sex:'M',
nationality:'australia',
Language:'english',
additional_info:'Sunrisers Hyderabad'
})



// Step-5b
// Basic CRUD operation in MongoDB


// Finding Documents
db.userprofile.find({})

// find document with Australia
db.userprofile.find({nationality:'australia'})

// find document with age > 30
db.userprofile.find({age:{$gt:30}})

// find document with age < 30
db.userprofile.find({age:{$lt:30}})

// find document with and condition  age<35 and age > 30
db.userprofile.find({$and:[ {age:{$lt:35}}  ,{age:{$gt:20}} ]})

// find document with and condition  age<35 or age > 32
db.userprofile.find({$or:[ {age:{$lt:35}}  ,{age:{$gt:32}} ]})

// total number of documents
db.userprofile.find({}).count()
// limits the number of lists to 2
db.userprofile.find({}).limit(2)
// skips the top 2 document
db.userprofile.find({}).skip(2)
// sorts the document in desc order
db.userprofile.find({}).sort({id:-1})

// Step-5c
// Basic CRUD operation in MongoDB

// Updating and Deleting Documents

//update -note the $set operator and it will update only one document as multi option is false
db.userprofile.update({location:'US'},{$set:{location:'United States of America'}})

// removes document with user id usr_001
db.userprofile.remove({userid:'usr_001'})

// removes document with user id usr_002
db.userprofile.remove({userid:'usr_002'})


// Step-6
// Capped Collection
// creates a capped collection with max 10 documents
db.createCollection("log_capped", { capped : true, size : 50 * 1024, max : 10 } )

// demo data for capped collection ->
// since 10 is the limit the first two of the total 12 will be ejected

db.log_capped.insert([{log_data:'log1'}])
db.log_capped.insert([{log_data:'log2'}])
db.log_capped.insert([{log_data:'log3'}])
db.log_capped.insert([{log_data:'log4'}])
db.log_capped.insert([{log_data:'log5'}])
db.log_capped.insert([{log_data:'log6'}])
db.log_capped.insert([{log_data:'log7'}])
db.log_capped.insert([{log_data:'log8'}])
db.log_capped.insert([{log_data:'log9'}])
db.log_capped.insert([{log_data:'log10'}])
db.log_capped.insert([{log_data:'log11'}])
db.log_capped.insert([{log_data:'log12'}])



// Step-7
// Indexing

// explain method will show the Query plan
db.userprofile.find(
   {income:5990800  }
).explain("executionStats")

// create index on income field
db.userprofile.createIndex({income: 1})
// drop index
db.userprofile.dropIndex({income:1})




// Step-8
// TTL Collection

// create a TTL index that expired in 10 seconds
db.demo_ttl.createIndex({log_data: 1}, {expireAfterSeconds: 10 })

// lists all indexes
db.demo_ttl.getIndexes()

// Demo data for TTL collection 
db.demo_ttl.insert([{log_data:new Date()}])

//search - lists all the documnets in demo collection
db.demo_ttl.find({})



// Step-9
// Text Search


// FULL TEXT SEARCH Initial Steps

// creates a text index on msg field
db.demo_textSearch.createIndex({msg:'text'})

// lists all indexes
db.demo_textSearch.getIndexes()


// Demo Data for Full Text Search
db.demo_textSearch.insert([{msg:'This is a good coffee'}])
db.demo_textSearch.insert([{msg:'This is a good coffee cures fatty liver '}])
db.demo_textSearch.insert([{msg:'This is a good coffee , the best among all'}])
db.demo_textSearch.insert([{msg:'This is a good coffee'}])
db.demo_textSearch.insert([{msg:'This is a good coffee.These coffee beans are dried well'}])
db.demo_textSearch.insert([{msg:'This is a good coffee.These coffee beans are from Indias leading coffee exporter'}])
db.demo_textSearch.insert([{msg:'java is a type of coffee '}])
db.demo_textSearch.insert([{msg:'java is also a name of place'}])
db.demo_textSearch.insert([{msg:'mongodb Queries are easy'}])
db.demo_textSearch.insert([{msg:'Happiness is the essential part of Life'}])
db.demo_textSearch.insert([{msg:'Im happy Here'}])




// Search in FULL TEXT SEARCH

// finds nothing
db.demo_textSearch.find({ msg:"good easy"})

// finds both as it is full text search
db.demo_textSearch.find({ $text: { $search:"good easy"}})

// negates document with fatty
db.demo_textSearch.find({ $text: { $search:"good easy -fatty"}})

// phrase search
db.demo_textSearch.find({ $text: { $search:"is also a "}})

// negates the word best in the document
db.demo_textSearch.find({ $text: { $search:"good easy -best"}})

// Result will have documents with 'good'
db.demo_textSearch.find({ $text: { $search:"goodness"}})

// Result will have documents with 'easy'
db.demo_textSearch.find({ $text: { $search:"easiness"}})

// Result will have documents with 'happiness'
db.demo_textSearch.find({ $text: { $search:"happy"}})

// neglects common words like 'the'
db.demo_textSearch.find({ $text: { $search:"the easy"}})

// textscore associated with every document
db.demo_textSearch.find({ $text: { $search:"coffee"}},{score: {$meta: "textScore"}})


//Step-10
// GridFS


// Simple demo using MongoBoster

Step-10

Regex    $regex operator

Sample data

db.person.insert([{name:'Ric David'}])
db.person.insert([{name:'Elizabeth DAVID'}])
db.person.insert([{name:'David Warner'}])
db.person.insert([{name:'David'}])
db.person.insert([{name:'John David1'}])
db.person.insert([{name:'Paula David'}])
db.person.insert([{name:'Davidson David King'}])
db.person.insert([{name:'1stdavid'}])
db.person.insert([{name:'5thdavid'}])
db.person.insert([{name: 'SIJU DAVID'}])
db.person.insert([{name: 'arun'}])
db.person.insert([{name: 'Karun'}])
db.person.insert([{name: 'Ahmed'}])

//Regex Queries

//Regex Queries

db.person.find({})
// searches document with David and arun
db.person.find( { name: { $regex: 'David|arun' } } )
// Searches for DAVID ignoring case
db.person.find( { name: { $regex: 'DAVID', $options: "i" } } )

db.person.find( { name: { $regex: /David/} } )

db.person.find( { name: { $regex: /David/i} } )
// matches cases
db.person.find( { name: { $regex: 'DAVID'} } )

//searches for document starting with 1
db.person.find( { name: { $regex: '^1'} } )
// search for davidson
db.person.find( { name: { $regex: /son.*/i} } )

// names ending with 'run'
db.person.find( { name: { $regex: 'run$'} } )

// names with with digit
db.person.find( { name: { $regex: '[0-9]'} } )

// Step-11
// 3 Types of Aggregation in MongoDB

// Aggregation 

//gets the count
db.userprofile.count()
// find distinct  documents
db.userprofile.distinct("age")

// using $match only
db.userprofile.aggregate( [
  { $match:   { income: { $gt: 4000000}}}])
  
  // using $match and $group 
db.userprofile.aggregate( [
  { $match:   { income: { $gt: 40000}}} ,
  { $group: { _id: null, total_users: { $sum: 1 } } }
] );



// using $sum operator and income field
db.userprofile.aggregate( [
  { $match:   { income: { $gt: 4000000}}} ,
  { $group: { _id: null, total_income: { $sum: '$income' } } }
] )